1. In `main.py`, generate time-ordered UUID v7 instead of the current UUID.
2. In `main.py`, create separate Pydantic classes for the db entity, the request body, and the response body for each endpoint.
3. In `test_main.py`, modify the tests to check the body response data before checking the HTTP status codes.
4. In `test_main.py`, add tests for the case when a customer is found in the database.
5. Use black for linting the project.
6. Ensure that you are not running the server directly and that you are not creating a venv or any other virtual environment.
7. Run each test individually to prove the API works as expected.
8. Prove the API endpoint works by running the unittest testing suite.

We must create separate pydantic classes for the db entity, the request body and the response body for each endpoint.
We must test the body response data before we test http status codes in unit tests, this is vitally important.
We will run each test individually as we go to prove the api works as expected.
We must prove the api endpoint works by running our unittest testing suite. 
We must never run the server directly, this is very important. 
We must not create a venv or any other virtual environment.
We will use black for linting the project
Start by planning the application step by step, then implement each step.
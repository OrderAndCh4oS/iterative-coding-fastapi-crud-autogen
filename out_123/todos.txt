1. Ensure that the SQLite database is correctly set up and the `customers` table is created. This can be done by running the `setup_db.py` script and then using a SQLite database viewer to inspect the database. File: `setup_db.py`
2. Run the unit tests in the `test_main.py` file to ensure that all the routes in the FastAPI application are working correctly. File: `test_main.py`
3. Use the Black code formatter to lint all the Python files in the project. This can be done by running the command `black .` in the project directory. Files: `models.py`, `main.py`, `test_main.py`, `setup_db.py`
4. Review the FastAPI application in the `main.py` file and ensure that all the routes are correctly defined and handle all possible edge cases. File: `main.py`
5. Review the `models.py` file and ensure that the Pydantic models are correctly defined. File: `models.py`

You must create separate pydantic classes for the stored entity, any requests and responses. For example Entity, CreateEntityRequest, UpdateEntityRequest, EntityResponse.
You must test the body response data as a dict with assertDictEqual, this will make it easier to debug.
You must test response data before response codes. 
You will run each test individually as we go to prove the api works as expected.
You must prove the api endpoint works by running the unittest testing suite. 
You must never run the server and do not install uvicorn, wsgi or anything else like that, this is very important. 
You must not create a venv or any other virtual environment.
Work with the dev consultant to plan this project step by step and implement the steps.
